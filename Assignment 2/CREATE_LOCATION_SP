create or replace procedure CREATE_LOCATION_SP (
  p_location_id		    OUT	INTEGER,        -- an output parameter
  p_location_country	IN	VARCHAR,        -- must not be NULL
  p_location_postal_code IN	VARCHAR,        -- must not be NULL
  p_location_street1	IN	VARCHAR,
  p_location_street2	IN	VARCHAR,
  p_location_city	    IN	VARCHAR,
  p_location_administrative_region IN VARCHAR
)

IS
/*
location_postal_code_check NUMBER;
location_country_check NUMBER;
location_street1_check NUMBER;*/
ex_error EXCEPTION;
lv_errormsg_txt VARCHAR(100);

BEGIN

/*SELECT COUNT (*)
INTO location_postal_code_check, location_country_check, location_street1_check
FROM VM_LOCATION
WHERE p_location_postal_code = LOCATION_POSTAL_CODE AND p_location_country = LOCATION_COUNTRY 
AND p_location_street1 = LOCATION_STREET1;

IF location_postal_code_check, location_country_check, ELSIF location_street1_check > 0 THEN

SELECT LOCATION_ID
INTO p_location_ID
FROM VM_LOCATION
WHERE p_location_postal_code = LOCATION_POSTAL_CODE AND p_location_country = LOCATION_COUNTRY 
AND p_location_street1 = LOCATION_STREET1;

lv_errormsg_txt := 'this location already exists ' || p_loaction_ID|| ;
RAISE ex_Error;

ELSIF location_postal_code_check AND location_country_check AND location_street1_check = 0 THEN
p_location_ID := LOCATION_ID_SQ.nextval;

END IF;*/

IF p_location_country is NULL THEN
   RAISE ex_error;
    END IF;

	INSERT INTO VM_LOCATION (
    location_id,
    location_country,
    location_postal_code,
    location_street_1,
    location_street_2,
    location_city,
    location_administrative_region
    
) VALUES (
    inc_seq.nextval,
    p_location_country,
    p_location_postal_code,
    p_location_street1,
    p_location_street2,
    p_location_city,
    p_location_administrative_region    
);

COMMIT;

 /*EXCEPTION
  When ex_Error THEN
  DBMS_OUTPUT.PUT_LINE (lv_errormsg_txt);
  ROLLBACK;
      
   WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE ('THE ERROR CODE IS ' || SQLCODE);
    DBMS_OUTPUT.PUT_LINE ('THE ERROR msg IS ' || SQLCODE);
    ROLLBACK;  
    
    END;*/
    
EXCEPTION
 WHEN ex_error THEN
    DBMS_OUTPUT.PUT_LINE (lv_errormsg_txt);
    DBMS_OUTPUT.PUT_LINE('Error text:  "Missing mandatory value for parameter (x).  No location added.');
    DBMS_OUTPUT.PUT_LINE(' Error meaning: A mandatory value is missing.  Here, y = ''CREATE_LOCATION_SP''');
    DBMS_OUTPUT.PUT_LINE('Error effect: Because a mandatory value is not provided, no data are 
    inserted into the VM_LOCATION table.  The p_location_id value returned is 
    NULL.');
    ROLLBACK;
 WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE ('THE ERROR CODE IS ' || SQLCODE);
    DBMS_OUTPUT.PUT_LINE ('THE ERROR msg IS ' || SQLCODE);
    ROLLBACK;
END;
